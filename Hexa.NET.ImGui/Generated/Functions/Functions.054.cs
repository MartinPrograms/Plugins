// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImTextFindPreviousUtf8CodepointS(byte* inTextStart, string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextCurr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextCurr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(inTextStart, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImTextFindPreviousUtf8Codepoint(ref byte inTextStart, ref byte inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				fixed (byte* pinTextCurr = &inTextCurr)
				{
					byte* ret = ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImTextFindPreviousUtf8CodepointS(ref byte inTextStart, ref byte inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				fixed (byte* pinTextCurr = &inTextCurr)
				{
					string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImTextFindPreviousUtf8Codepoint(ReadOnlySpan<byte> inTextStart, ReadOnlySpan<byte> inTextCurr)
		{
			fixed (byte* pinTextStart = inTextStart)
			{
				fixed (byte* pinTextCurr = inTextCurr)
				{
					byte* ret = ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImTextFindPreviousUtf8CodepointS(ReadOnlySpan<byte> inTextStart, ReadOnlySpan<byte> inTextCurr)
		{
			fixed (byte* pinTextStart = inTextStart)
			{
				fixed (byte* pinTextCurr = inTextCurr)
				{
					string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImTextFindPreviousUtf8Codepoint(string inTextStart, string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextCurr != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextCurr, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = ImTextFindPreviousUtf8CodepointNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImTextFindPreviousUtf8CodepointS(string inTextStart, string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextCurr != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextCurr, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(pStr0, pStr1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int ImTextCountLinesNative(byte* inText, byte* inTextEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)vt[714])(inText, inTextEnd);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[714])((nint)inText, (nint)inTextEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(byte* inText, byte* inTextEnd)
		{
			int ret = ImTextCountLinesNative(inText, inTextEnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(ref byte inText, byte* inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				int ret = ImTextCountLinesNative((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(ReadOnlySpan<byte> inText, byte* inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				int ret = ImTextCountLinesNative((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(string inText, byte* inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountLinesNative(pStr0, inTextEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(byte* inText, ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountLinesNative(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(byte* inText, ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinTextEnd = inTextEnd)
			{
				int ret = ImTextCountLinesNative(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(byte* inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountLinesNative(inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(ref byte inText, ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountLinesNative((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(ReadOnlySpan<byte> inText, ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				fixed (byte* pinTextEnd = inTextEnd)
				{
					int ret = ImTextCountLinesNative((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImTextCountLines(string inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCountLinesNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImFileHandle ImFileOpenNative(byte* filename, byte* mode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ImFileHandle>)vt[715])(filename, mode);
			#else
			return (ImFileHandle)((delegate* unmanaged[Cdecl]<nint, nint, ImFileHandle>)vt[715])((nint)filename, (nint)mode);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(byte* filename, byte* mode)
		{
			ImFileHandle ret = ImFileOpenNative(filename, mode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(ref byte filename, byte* mode)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFileHandle ret = ImFileOpenNative((byte*)pfilename, mode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(ReadOnlySpan<byte> filename, byte* mode)
		{
			fixed (byte* pfilename = filename)
			{
				ImFileHandle ret = ImFileOpenNative((byte*)pfilename, mode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(string filename, byte* mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(pStr0, mode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(byte* filename, ref byte mode)
		{
			fixed (byte* pmode = &mode)
			{
				ImFileHandle ret = ImFileOpenNative(filename, (byte*)pmode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(byte* filename, ReadOnlySpan<byte> mode)
		{
			fixed (byte* pmode = mode)
			{
				ImFileHandle ret = ImFileOpenNative(filename, (byte*)pmode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(byte* filename, string mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(filename, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(ref byte filename, ref byte mode)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					ImFileHandle ret = ImFileOpenNative((byte*)pfilename, (byte*)pmode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(ReadOnlySpan<byte> filename, ReadOnlySpan<byte> mode)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (byte* pmode = mode)
				{
					ImFileHandle ret = ImFileOpenNative((byte*)pfilename, (byte*)pmode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFileHandle ImFileOpen(string filename, string mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImFileCloseNative(ImFileHandle file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFileHandle, byte>)vt[716])(file);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImFileHandle, byte>)vt[716])(file);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImFileClose(ImFileHandle file)
		{
			byte ret = ImFileCloseNative(file);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ulong ImFileGetSizeNative(ImFileHandle file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFileHandle, ulong>)vt[717])(file);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<ImFileHandle, ulong>)vt[717])(file);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong ImFileGetSize(ImFileHandle file)
		{
			ulong ret = ImFileGetSizeNative(file);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ulong ImFileReadNative(void* data, ulong size, ulong count, ImFileHandle file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, ulong, ImFileHandle, ulong>)vt[718])(data, size, count, file);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong, ulong, ImFileHandle, ulong>)vt[718])((nint)data, size, count, file);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong ImFileRead(void* data, ulong size, ulong count, ImFileHandle file)
		{
			ulong ret = ImFileReadNative(data, size, count, file);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ulong ImFileWriteNative(void* data, ulong size, ulong count, ImFileHandle file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, ulong, ImFileHandle, ulong>)vt[719])(data, size, count, file);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong, ulong, ImFileHandle, ulong>)vt[719])((nint)data, size, count, file);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong ImFileWrite(void* data, ulong size, ulong count, ImFileHandle file)
		{
			ulong ret = ImFileWriteNative(data, size, count, file);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void* ImFileLoadToMemoryNative(byte* filename, byte* mode, ulong* outFileSize, int paddingBytes)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ulong*, int, void*>)vt[720])(filename, mode, outFileSize, paddingBytes);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nint, int, nint>)vt[720])((nint)filename, (nint)mode, (nint)outFileSize, paddingBytes);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(byte* filename, byte* mode, ulong* outFileSize, int paddingBytes)
		{
			void* ret = ImFileLoadToMemoryNative(filename, mode, outFileSize, paddingBytes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(ref byte filename, byte* mode, ulong* outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, outFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(ReadOnlySpan<byte> filename, byte* mode, ulong* outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = filename)
			{
				void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, outFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(string filename, byte* mode, ulong* outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(pStr0, mode, outFileSize, paddingBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(byte* filename, ref byte mode, ulong* outFileSize, int paddingBytes)
		{
			fixed (byte* pmode = &mode)
			{
				void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, outFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(byte* filename, ReadOnlySpan<byte> mode, ulong* outFileSize, int paddingBytes)
		{
			fixed (byte* pmode = mode)
			{
				void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, outFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(byte* filename, string mode, ulong* outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(filename, pStr0, outFileSize, paddingBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(ref byte filename, ref byte mode, ulong* outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, outFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(ReadOnlySpan<byte> filename, ReadOnlySpan<byte> mode, ulong* outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (byte* pmode = mode)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, outFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(string filename, string mode, ulong* outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(pStr0, pStr1, outFileSize, paddingBytes);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(byte* filename, byte* mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(filename, mode, (ulong*)poutFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(ref byte filename, byte* mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, (ulong*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(ReadOnlySpan<byte> filename, byte* mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, (ulong*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(string filename, byte* mode, ref nuint outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(pStr0, mode, (ulong*)poutFileSize, paddingBytes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(byte* filename, ref byte mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pmode = &mode)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, (ulong*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(byte* filename, ReadOnlySpan<byte> mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pmode = mode)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, (ulong*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(byte* filename, string mode, ref nuint outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(filename, pStr0, (ulong*)poutFileSize, paddingBytes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(ref byte filename, ref byte mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					fixed (nuint* poutFileSize = &outFileSize)
					{
						void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, (ulong*)poutFileSize, paddingBytes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(ReadOnlySpan<byte> filename, ReadOnlySpan<byte> mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (byte* pmode = mode)
				{
					fixed (nuint* poutFileSize = &outFileSize)
					{
						void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, (ulong*)poutFileSize, paddingBytes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void* ImFileLoadToMemory(string filename, string mode, ref nuint outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(pStr0, pStr1, (ulong*)poutFileSize, paddingBytes);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImPowFloatNative(float x, float y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float>)vt[721])(x, y);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float>)vt[721])(x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImPowFloat(float x, float y)
		{
			float ret = ImPowFloatNative(x, y);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double ImPowDoubleNative(double x, double y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double, double>)vt[722])(x, y);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double, double>)vt[722])(x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double ImPowDouble(double x, double y)
		{
			double ret = ImPowDoubleNative(x, y);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImLogFloatNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[723])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[723])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImLogFloat(float x)
		{
			float ret = ImLogFloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double ImLogDoubleNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[724])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)vt[724])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double ImLogDouble(double x)
		{
			double ret = ImLogDoubleNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int ImAbsIntNative(int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[725])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[725])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImAbsInt(int x)
		{
			int ret = ImAbsIntNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImAbsFloatNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[726])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[726])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImAbsFloat(float x)
		{
			float ret = ImAbsFloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double ImAbsDoubleNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[727])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)vt[727])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double ImAbsDouble(double x)
		{
			double ret = ImAbsDoubleNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImSignFloatNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[728])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[728])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImSignFloat(float x)
		{
			float ret = ImSignFloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double ImSignDoubleNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[729])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)vt[729])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double ImSignDouble(double x)
		{
			double ret = ImSignDoubleNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImRsqrtFloatNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[730])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[730])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImRsqrtFloat(float x)
		{
			float ret = ImRsqrtFloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double ImRsqrtDoubleNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[731])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)vt[731])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double ImRsqrtDouble(double x)
		{
			double ret = ImRsqrtDoubleNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImMinNative(Vector2* pOut, Vector2 lhs, Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[732])(pOut, lhs, rhs);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[732])((nint)pOut, lhs, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImMin(Vector2 lhs, Vector2 rhs)
		{
			Vector2 ret;
			ImMinNative(&ret, lhs, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImMin(Vector2* pOut, Vector2 lhs, Vector2 rhs)
		{
			ImMinNative(pOut, lhs, rhs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImMin(ref Vector2 pOut, Vector2 lhs, Vector2 rhs)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImMinNative((Vector2*)ppOut, lhs, rhs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImMaxNative(Vector2* pOut, Vector2 lhs, Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[733])(pOut, lhs, rhs);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[733])((nint)pOut, lhs, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImMax(Vector2 lhs, Vector2 rhs)
		{
			Vector2 ret;
			ImMaxNative(&ret, lhs, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImMax(Vector2* pOut, Vector2 lhs, Vector2 rhs)
		{
			ImMaxNative(pOut, lhs, rhs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImMax(ref Vector2 pOut, Vector2 lhs, Vector2 rhs)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImMaxNative((Vector2*)ppOut, lhs, rhs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImClampNative(Vector2* pOut, Vector2 v, Vector2 mn, Vector2 mx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[734])(pOut, v, mn, mx);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, void>)vt[734])((nint)pOut, v, mn, mx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImClamp(Vector2 v, Vector2 mn, Vector2 mx)
		{
			Vector2 ret;
			ImClampNative(&ret, v, mn, mx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImClamp(Vector2* pOut, Vector2 v, Vector2 mn, Vector2 mx)
		{
			ImClampNative(pOut, v, mn, mx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImClamp(ref Vector2 pOut, Vector2 v, Vector2 mn, Vector2 mx)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImClampNative((Vector2*)ppOut, v, mn, mx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImLerpVec2FloatNative(Vector2* pOut, Vector2 a, Vector2 b, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, float, void>)vt[735])(pOut, a, b, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, float, void>)vt[735])((nint)pOut, a, b, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImLerpVec2Float(Vector2 a, Vector2 b, float t)
		{
			Vector2 ret;
			ImLerpVec2FloatNative(&ret, a, b, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImLerpVec2Float(Vector2* pOut, Vector2 a, Vector2 b, float t)
		{
			ImLerpVec2FloatNative(pOut, a, b, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImLerpVec2Float(ref Vector2 pOut, Vector2 a, Vector2 b, float t)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImLerpVec2FloatNative((Vector2*)ppOut, a, b, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImLerpVec2Vec2Native(Vector2* pOut, Vector2 a, Vector2 b, Vector2 t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[736])(pOut, a, b, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, void>)vt[736])((nint)pOut, a, b, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImLerpVec2Vec2(Vector2 a, Vector2 b, Vector2 t)
		{
			Vector2 ret;
			ImLerpVec2Vec2Native(&ret, a, b, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImLerpVec2Vec2(Vector2* pOut, Vector2 a, Vector2 b, Vector2 t)
		{
			ImLerpVec2Vec2Native(pOut, a, b, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImLerpVec2Vec2(ref Vector2 pOut, Vector2 a, Vector2 b, Vector2 t)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImLerpVec2Vec2Native((Vector2*)ppOut, a, b, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImLerpVec4Native(Vector4* pOut, Vector4 a, Vector4 b, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, Vector4, Vector4, float, void>)vt[737])(pOut, a, b, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector4, Vector4, float, void>)vt[737])((nint)pOut, a, b, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector4 ImLerpVec4(Vector4 a, Vector4 b, float t)
		{
			Vector4 ret;
			ImLerpVec4Native(&ret, a, b, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImLerpVec4(Vector4* pOut, Vector4 a, Vector4 b, float t)
		{
			ImLerpVec4Native(pOut, a, b, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImLerpVec4(ref Vector4 pOut, Vector4 a, Vector4 b, float t)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				ImLerpVec4Native((Vector4*)ppOut, a, b, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImSaturateNative(float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[738])(f);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[738])(f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImSaturate(float f)
		{
			float ret = ImSaturateNative(f);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImLengthSqrVec2Native(Vector2 lhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, float>)vt[739])(lhs);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, float>)vt[739])(lhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImLengthSqrVec2(Vector2 lhs)
		{
			float ret = ImLengthSqrVec2Native(lhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImLengthSqrVec4Native(Vector4 lhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, float>)vt[740])(lhs);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector4, float>)vt[740])(lhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImLengthSqrVec4(Vector4 lhs)
		{
			float ret = ImLengthSqrVec4Native(lhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImInvLengthNative(Vector2 lhs, float failValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[741])(lhs, failValue);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[741])(lhs, failValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImInvLength(Vector2 lhs, float failValue)
		{
			float ret = ImInvLengthNative(lhs, failValue);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImTruncFloatNative(float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[742])(f);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[742])(f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImTruncFloat(float f)
		{
			float ret = ImTruncFloatNative(f);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImTruncVec2Native(Vector2* pOut, Vector2 v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, void>)vt[743])(pOut, v);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[743])((nint)pOut, v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImTruncVec2(Vector2 v)
		{
			Vector2 ret;
			ImTruncVec2Native(&ret, v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTruncVec2(Vector2* pOut, Vector2 v)
		{
			ImTruncVec2Native(pOut, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTruncVec2(ref Vector2 pOut, Vector2 v)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImTruncVec2Native((Vector2*)ppOut, v);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImFloorFloatNative(float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[744])(f);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[744])(f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImFloorFloat(float f)
		{
			float ret = ImFloorFloatNative(f);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImFloorVec2Native(Vector2* pOut, Vector2 v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, void>)vt[745])(pOut, v);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[745])((nint)pOut, v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImFloorVec2(Vector2 v)
		{
			Vector2 ret;
			ImFloorVec2Native(&ret, v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFloorVec2(Vector2* pOut, Vector2 v)
		{
			ImFloorVec2Native(pOut, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFloorVec2(ref Vector2 pOut, Vector2 v)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImFloorVec2Native((Vector2*)ppOut, v);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int ImModPositiveNative(int a, int b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int>)vt[746])(a, b);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int>)vt[746])(a, b);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImModPositive(int a, int b)
		{
			int ret = ImModPositiveNative(a, b);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImDotNative(Vector2 a, Vector2 b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, float>)vt[747])(a, b);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, Vector2, float>)vt[747])(a, b);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImDot(Vector2 a, Vector2 b)
		{
			float ret = ImDotNative(a, b);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRotateNative(Vector2* pOut, Vector2 v, float cosA, float sinA)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, float, float, void>)vt[748])(pOut, v, cosA, sinA);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, float, void>)vt[748])((nint)pOut, v, cosA, sinA);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRotate(Vector2 v, float cosA, float sinA)
		{
			Vector2 ret;
			ImRotateNative(&ret, v, cosA, sinA);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRotate(Vector2* pOut, Vector2 v, float cosA, float sinA)
		{
			ImRotateNative(pOut, v, cosA, sinA);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRotate(ref Vector2 pOut, Vector2 v, float cosA, float sinA)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRotateNative((Vector2*)ppOut, v, cosA, sinA);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImLinearSweepNative(float current, float target, float speed)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float>)vt[749])(current, target, speed);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float, float>)vt[749])(current, target, speed);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImLinearSweep(float current, float target, float speed)
		{
			float ret = ImLinearSweepNative(current, target, speed);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImLinearRemapClampNative(float s0, float s1, float d0, float d1, float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float>)vt[750])(s0, s1, d0, d1, x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float, float, float, float>)vt[750])(s0, s1, d0, d1, x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImLinearRemapClamp(float s0, float s1, float d0, float d1, float x)
		{
			float ret = ImLinearRemapClampNative(s0, s1, d0, d1, x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImMulNative(Vector2* pOut, Vector2 lhs, Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[751])(pOut, lhs, rhs);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[751])((nint)pOut, lhs, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImMul(Vector2 lhs, Vector2 rhs)
		{
			Vector2 ret;
			ImMulNative(&ret, lhs, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImMul(Vector2* pOut, Vector2 lhs, Vector2 rhs)
		{
			ImMulNative(pOut, lhs, rhs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImMul(ref Vector2 pOut, Vector2 lhs, Vector2 rhs)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImMulNative((Vector2*)ppOut, lhs, rhs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImIsFloatAboveGuaranteedIntegerPrecisionNative(float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, byte>)vt[752])(f);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<float, byte>)vt[752])(f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImIsFloatAboveGuaranteedIntegerPrecision(float f)
		{
			byte ret = ImIsFloatAboveGuaranteedIntegerPrecisionNative(f);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImExponentialMovingAverageNative(float avg, float sample, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, int, float>)vt[753])(avg, sample, n);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, int, float>)vt[753])(avg, sample, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImExponentialMovingAverage(float avg, float sample, int n)
		{
			float ret = ImExponentialMovingAverageNative(avg, sample, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBezierCubicCalcNative(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, float, void>)vt[754])(pOut, p1, p2, p3, p4, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, float, void>)vt[754])((nint)pOut, p1, p2, p3, p4, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImBezierCubicCalc(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			Vector2 ret;
			ImBezierCubicCalcNative(&ret, p1, p2, p3, p4, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBezierCubicCalc(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			ImBezierCubicCalcNative(pOut, p1, p2, p3, p4, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBezierCubicCalc(ref Vector2 pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImBezierCubicCalcNative((Vector2*)ppOut, p1, p2, p3, p4, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBezierCubicClosestPointNative(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, Vector2, int, void>)vt[755])(pOut, p1, p2, p3, p4, p, numSegments);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, Vector2, int, void>)vt[755])((nint)pOut, p1, p2, p3, p4, p, numSegments);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImBezierCubicClosestPoint(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			Vector2 ret;
			ImBezierCubicClosestPointNative(&ret, p1, p2, p3, p4, p, numSegments);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBezierCubicClosestPoint(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			ImBezierCubicClosestPointNative(pOut, p1, p2, p3, p4, p, numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBezierCubicClosestPoint(ref Vector2 pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImBezierCubicClosestPointNative((Vector2*)ppOut, p1, p2, p3, p4, p, numSegments);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBezierCubicClosestPointCasteljauNative(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, Vector2, float, void>)vt[756])(pOut, p1, p2, p3, p4, p, tessTol);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, Vector2, float, void>)vt[756])((nint)pOut, p1, p2, p3, p4, p, tessTol);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImBezierCubicClosestPointCasteljau(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			Vector2 ret;
			ImBezierCubicClosestPointCasteljauNative(&ret, p1, p2, p3, p4, p, tessTol);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBezierCubicClosestPointCasteljau(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			ImBezierCubicClosestPointCasteljauNative(pOut, p1, p2, p3, p4, p, tessTol);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBezierCubicClosestPointCasteljau(ref Vector2 pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImBezierCubicClosestPointCasteljauNative((Vector2*)ppOut, p1, p2, p3, p4, p, tessTol);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBezierQuadraticCalcNative(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, float, void>)vt[757])(pOut, p1, p2, p3, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, float, void>)vt[757])((nint)pOut, p1, p2, p3, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImBezierQuadraticCalc(Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			Vector2 ret;
			ImBezierQuadraticCalcNative(&ret, p1, p2, p3, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBezierQuadraticCalc(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			ImBezierQuadraticCalcNative(pOut, p1, p2, p3, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBezierQuadraticCalc(ref Vector2 pOut, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImBezierQuadraticCalcNative((Vector2*)ppOut, p1, p2, p3, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImLineClosestPointNative(Vector2* pOut, Vector2 a, Vector2 b, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[758])(pOut, a, b, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, void>)vt[758])((nint)pOut, a, b, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImLineClosestPoint(Vector2 a, Vector2 b, Vector2 p)
		{
			Vector2 ret;
			ImLineClosestPointNative(&ret, a, b, p);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImLineClosestPoint(Vector2* pOut, Vector2 a, Vector2 b, Vector2 p)
		{
			ImLineClosestPointNative(pOut, a, b, p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImLineClosestPoint(ref Vector2 pOut, Vector2 a, Vector2 b, Vector2 p)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImLineClosestPointNative((Vector2*)ppOut, a, b, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImTriangleContainsPointNative(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, byte>)vt[759])(a, b, c, p);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, byte>)vt[759])(a, b, c, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImTriangleContainsPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			byte ret = ImTriangleContainsPointNative(a, b, c, p);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImTriangleClosestPointNative(Vector2* pOut, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, void>)vt[760])(pOut, a, b, c, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, void>)vt[760])((nint)pOut, a, b, c, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImTriangleClosestPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			Vector2 ret;
			ImTriangleClosestPointNative(&ret, a, b, c, p);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleClosestPoint(Vector2* pOut, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			ImTriangleClosestPointNative(pOut, a, b, c, p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleClosestPoint(ref Vector2 pOut, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImTriangleClosestPointNative((Vector2*)ppOut, a, b, c, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImTriangleBarycentricCoordsNative(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, float* outW)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, float*, float*, float*, void>)vt[761])(a, b, c, p, outU, outV, outW);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, nint, nint, nint, void>)vt[761])(a, b, c, p, (nint)outU, (nint)outV, (nint)outW);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, float* outW)
		{
			ImTriangleBarycentricCoordsNative(a, b, c, p, outU, outV, outW);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, float* outV, float* outW)
		{
			fixed (float* poutU = &outU)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, outV, outW);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, ref float outV, float* outW)
		{
			fixed (float* poutV = &outV)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, outU, (float*)poutV, outW);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, ref float outV, float* outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutV = &outV)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, (float*)poutV, outW);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, ref float outW)
		{
			fixed (float* poutW = &outW)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, outU, outV, (float*)poutW);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, float* outV, ref float outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutW = &outW)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, outV, (float*)poutW);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, ref float outV, ref float outW)
		{
			fixed (float* poutV = &outV)
			{
				fixed (float* poutW = &outW)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, outU, (float*)poutV, (float*)poutW);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, ref float outV, ref float outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutV = &outV)
				{
					fixed (float* poutW = &outW)
					{
						ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, (float*)poutV, (float*)poutW);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImTriangleAreaNative(Vector2 a, Vector2 b, Vector2 c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, float>)vt[762])(a, b, c);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, float>)vt[762])(a, b, c);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImTriangleArea(Vector2 a, Vector2 b, Vector2 c)
		{
			float ret = ImTriangleAreaNative(a, b, c);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImTriangleIsClockwiseNative(Vector2 a, Vector2 b, Vector2 c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, byte>)vt[763])(a, b, c);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, byte>)vt[763])(a, b, c);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImTriangleIsClockwise(Vector2 a, Vector2 b, Vector2 c)
		{
			byte ret = ImTriangleIsClockwiseNative(a, b, c);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImVec1* ImVec1ImVec1NilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImVec1*>)vt[764])();
			#else
			return (ImVec1*)((delegate* unmanaged[Cdecl]<nint>)vt[764])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec1Ptr ImVec1ImVec1Nil()
		{
			ImVec1Ptr ret = ImVec1ImVec1NilNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImVec1DestroyNative(ImVec1* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVec1*, void>)vt[765])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[765])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImVec1Destroy(ImVec1Ptr self)
		{
			ImVec1DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImVec1Destroy(ref ImVec1 self)
		{
			fixed (ImVec1* pself = &self)
			{
				ImVec1DestroyNative((ImVec1*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImVec1* ImVec1ImVec1FloatNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, ImVec1*>)vt[766])(x);
			#else
			return (ImVec1*)((delegate* unmanaged[Cdecl]<float, nint>)vt[766])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec1Ptr ImVec1ImVec1Float(float x)
		{
			ImVec1Ptr ret = ImVec1ImVec1FloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImVec2Ih* ImVec2IhImVec2IhNilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImVec2Ih*>)vt[767])();
			#else
			return (ImVec2Ih*)((delegate* unmanaged[Cdecl]<nint>)vt[767])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec2IhPtr ImVec2IhImVec2IhNil()
		{
			ImVec2IhPtr ret = ImVec2IhImVec2IhNilNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImVec2IhDestroyNative(ImVec2Ih* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVec2Ih*, void>)vt[768])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[768])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImVec2IhDestroy(ImVec2IhPtr self)
		{
			ImVec2IhDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImVec2IhDestroy(ref ImVec2Ih self)
		{
			fixed (ImVec2Ih* pself = &self)
			{
				ImVec2IhDestroyNative((ImVec2Ih*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImVec2Ih* ImVec2IhImVec2IhShortNative(short x, short y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<short, short, ImVec2Ih*>)vt[769])(x, y);
			#else
			return (ImVec2Ih*)((delegate* unmanaged[Cdecl]<short, short, nint>)vt[769])(x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec2IhPtr ImVec2IhImVec2IhShort(short x, short y)
		{
			ImVec2IhPtr ret = ImVec2IhImVec2IhShortNative(x, y);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImVec2Ih* ImVec2IhImVec2IhVec2Native(Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, ImVec2Ih*>)vt[770])(rhs);
			#else
			return (ImVec2Ih*)((delegate* unmanaged[Cdecl]<Vector2, nint>)vt[770])(rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec2IhPtr ImVec2IhImVec2IhVec2(Vector2 rhs)
		{
			ImVec2IhPtr ret = ImVec2IhImVec2IhVec2Native(rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImRect* ImRectImRectNilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*>)vt[771])();
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<nint>)vt[771])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImRectPtr ImRectImRectNil()
		{
			ImRectPtr ret = ImRectImRectNilNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectDestroyNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, void>)vt[772])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[772])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectDestroy(ImRectPtr self)
		{
			ImRectDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectDestroy(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectDestroyNative((ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImRect* ImRectImRectVec2Native(Vector2 min, Vector2 max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, ImRect*>)vt[773])(min, max);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<Vector2, Vector2, nint>)vt[773])(min, max);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImRectPtr ImRectImRectVec2(Vector2 min, Vector2 max)
		{
			ImRectPtr ret = ImRectImRectVec2Native(min, max);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImRect* ImRectImRectVec4Native(Vector4 v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, ImRect*>)vt[774])(v);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<Vector4, nint>)vt[774])(v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImRectPtr ImRectImRectVec4(Vector4 v)
		{
			ImRectPtr ret = ImRectImRectVec4Native(v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImRect* ImRectImRectFloatNative(float x1, float y1, float x2, float y2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, ImRect*>)vt[775])(x1, y1, x2, y2);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<float, float, float, float, nint>)vt[775])(x1, y1, x2, y2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImRectPtr ImRectImRectFloat(float x1, float y1, float x2, float y2)
		{
			ImRectPtr ret = ImRectImRectFloatNative(x1, y1, x2, y2);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectGetCenterNative(Vector2* pOut, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[776])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[776])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetCenter(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetCenterNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetCenter(Vector2* pOut, ImRectPtr self)
		{
			ImRectGetCenterNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetCenter(ref Vector2 pOut, ImRectPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetCenterNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetCenter(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetCenterNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetCenter(Vector2* pOut, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetCenterNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetCenter(ref Vector2 pOut, ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetCenterNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectGetSizeNative(Vector2* pOut, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[777])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[777])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetSize(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetSizeNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetSize(Vector2* pOut, ImRectPtr self)
		{
			ImRectGetSizeNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetSize(ref Vector2 pOut, ImRectPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetSizeNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetSize(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetSizeNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetSize(Vector2* pOut, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetSizeNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetSize(ref Vector2 pOut, ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetSizeNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImRectGetWidthNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[778])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[778])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImRectGetWidth(ImRectPtr self)
		{
			float ret = ImRectGetWidthNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImRectGetWidth(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetWidthNative((ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImRectGetHeightNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[779])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[779])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImRectGetHeight(ImRectPtr self)
		{
			float ret = ImRectGetHeightNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImRectGetHeight(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetHeightNative((ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static float ImRectGetAreaNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[780])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[780])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImRectGetArea(ImRectPtr self)
		{
			float ret = ImRectGetAreaNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float ImRectGetArea(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetAreaNative((ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectGetTLNative(Vector2* pOut, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[781])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[781])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetTL(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetTLNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetTL(Vector2* pOut, ImRectPtr self)
		{
			ImRectGetTLNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetTL(ref Vector2 pOut, ImRectPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetTLNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetTL(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetTL(Vector2* pOut, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTLNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetTL(ref Vector2 pOut, ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTLNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectGetTRNative(Vector2* pOut, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[782])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[782])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetTR(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetTRNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetTR(Vector2* pOut, ImRectPtr self)
		{
			ImRectGetTRNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetTR(ref Vector2 pOut, ImRectPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetTRNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetTR(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetTR(Vector2* pOut, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTRNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetTR(ref Vector2 pOut, ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTRNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectGetBLNative(Vector2* pOut, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[783])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[783])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetBL(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetBLNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetBL(Vector2* pOut, ImRectPtr self)
		{
			ImRectGetBLNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetBL(ref Vector2 pOut, ImRectPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetBLNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetBL(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetBL(Vector2* pOut, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBLNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetBL(ref Vector2 pOut, ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBLNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectGetBRNative(Vector2* pOut, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[784])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[784])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetBR(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetBRNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetBR(Vector2* pOut, ImRectPtr self)
		{
			ImRectGetBRNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetBR(ref Vector2 pOut, ImRectPtr self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetBRNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ImRectGetBR(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetBR(Vector2* pOut, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBRNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectGetBR(ref Vector2 pOut, ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBRNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImRectContainsVec2Native(ImRect* self, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, Vector2, byte>)vt[785])(self, p);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, byte>)vt[785])((nint)self, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectContainsVec2(ImRectPtr self, Vector2 p)
		{
			byte ret = ImRectContainsVec2Native(self, p);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectContainsVec2(ref ImRect self, Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsVec2Native((ImRect*)pself, p);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImRectContainsRectNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, ImRect, byte>)vt[786])(self, r);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImRect, byte>)vt[786])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectContainsRect(ImRectPtr self, ImRect r)
		{
			byte ret = ImRectContainsRectNative(self, r);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectContainsRect(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsRectNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImRectContainsWithPadNative(ImRect* self, Vector2 p, Vector2 pad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, Vector2, Vector2, byte>)vt[787])(self, p, pad);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, byte>)vt[787])((nint)self, p, pad);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectContainsWithPad(ImRectPtr self, Vector2 p, Vector2 pad)
		{
			byte ret = ImRectContainsWithPadNative(self, p, pad);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectContainsWithPad(ref ImRect self, Vector2 p, Vector2 pad)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsWithPadNative((ImRect*)pself, p, pad);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImRectOverlapsNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, ImRect, byte>)vt[788])(self, r);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImRect, byte>)vt[788])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectOverlaps(ImRectPtr self, ImRect r)
		{
			byte ret = ImRectOverlapsNative(self, r);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectOverlaps(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectOverlapsNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectAddVec2Native(ImRect* self, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[789])(self, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[789])((nint)self, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectAddVec2(ImRectPtr self, Vector2 p)
		{
			ImRectAddVec2Native(self, p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectAddVec2(ref ImRect self, Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddVec2Native((ImRect*)pself, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectAddRectNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[790])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[790])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectAddRect(ImRectPtr self, ImRect r)
		{
			ImRectAddRectNative(self, r);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectAddRect(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddRectNative((ImRect*)pself, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectExpandFloatNative(ImRect* self, float amount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[791])(self, amount);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[791])((nint)self, amount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectExpandFloat(ImRectPtr self, float amount)
		{
			ImRectExpandFloatNative(self, amount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectExpandFloat(ref ImRect self, float amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandFloatNative((ImRect*)pself, amount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectExpandVec2Native(ImRect* self, Vector2 amount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[792])(self, amount);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[792])((nint)self, amount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectExpandVec2(ImRectPtr self, Vector2 amount)
		{
			ImRectExpandVec2Native(self, amount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectExpandVec2(ref ImRect self, Vector2 amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandVec2Native((ImRect*)pself, amount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectTranslateNative(ImRect* self, Vector2 d)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[793])(self, d);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[793])((nint)self, d);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectTranslate(ImRectPtr self, Vector2 d)
		{
			ImRectTranslateNative(self, d);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectTranslate(ref ImRect self, Vector2 d)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateNative((ImRect*)pself, d);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectTranslateXNative(ImRect* self, float dx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[794])(self, dx);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[794])((nint)self, dx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectTranslateX(ImRectPtr self, float dx)
		{
			ImRectTranslateXNative(self, dx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectTranslateX(ref ImRect self, float dx)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateXNative((ImRect*)pself, dx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectTranslateYNative(ImRect* self, float dy)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[795])(self, dy);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[795])((nint)self, dy);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectTranslateY(ImRectPtr self, float dy)
		{
			ImRectTranslateYNative(self, dy);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectTranslateY(ref ImRect self, float dy)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateYNative((ImRect*)pself, dy);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectClipWithNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[796])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[796])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectClipWith(ImRectPtr self, ImRect r)
		{
			ImRectClipWithNative(self, r);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectClipWith(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithNative((ImRect*)pself, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectClipWithFullNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[797])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[797])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectClipWithFull(ImRectPtr self, ImRect r)
		{
			ImRectClipWithFullNative(self, r);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectClipWithFull(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithFullNative((ImRect*)pself, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectFloorNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, void>)vt[798])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[798])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectFloor(ImRectPtr self)
		{
			ImRectFloorNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectFloor(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectFloorNative((ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImRectIsInvertedNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, byte>)vt[799])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[799])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectIsInverted(ImRectPtr self)
		{
			byte ret = ImRectIsInvertedNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImRectIsInverted(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectIsInvertedNative((ImRect*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImRectToVec4Native(Vector4* pOut, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, ImRect*, void>)vt[800])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[800])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector4 ImRectToVec4(ImRectPtr self)
		{
			Vector4 ret;
			ImRectToVec4Native(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectToVec4(Vector4* pOut, ImRectPtr self)
		{
			ImRectToVec4Native(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectToVec4(ref Vector4 pOut, ImRectPtr self)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				ImRectToVec4Native((Vector4*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector4 ImRectToVec4(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector4 ret;
				ImRectToVec4Native(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectToVec4(Vector4* pOut, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectToVec4Native(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImRectToVec4(ref Vector4 pOut, ref ImRect self)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectToVec4Native((Vector4*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ulong ImBitArrayGetStorageSizeInBytesNative(int bitcount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ulong>)vt[801])(bitcount);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<int, ulong>)vt[801])(bitcount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong ImBitArrayGetStorageSizeInBytes(int bitcount)
		{
			ulong ret = ImBitArrayGetStorageSizeInBytesNative(bitcount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBitArrayClearAllBitsNative(uint* arr, int bitcount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[802])(arr, bitcount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[802])((nint)arr, bitcount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitArrayClearAllBits(uint* arr, int bitcount)
		{
			ImBitArrayClearAllBitsNative(arr, bitcount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitArrayClearAllBits(ref uint arr, int bitcount)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearAllBitsNative((uint*)parr, bitcount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImBitArrayTestBitNative(uint* arr, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint*, int, byte>)vt[803])(arr, n);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)vt[803])((nint)arr, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImBitArrayTestBit(uint* arr, int n)
		{
			byte ret = ImBitArrayTestBitNative(arr, n);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImBitArrayTestBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				byte ret = ImBitArrayTestBitNative((uint*)parr, n);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBitArrayClearBitNative(uint* arr, int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[804])(arr, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[804])((nint)arr, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitArrayClearBit(uint* arr, int n)
		{
			ImBitArrayClearBitNative(arr, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitArrayClearBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearBitNative((uint*)parr, n);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBitArraySetBitNative(uint* arr, int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[805])(arr, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[805])((nint)arr, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitArraySetBit(uint* arr, int n)
		{
			ImBitArraySetBitNative(arr, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitArraySetBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitNative((uint*)parr, n);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBitArraySetBitRangeNative(uint* arr, int n, int n2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, int, void>)vt[806])(arr, n, n2);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[806])((nint)arr, n, n2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitArraySetBitRange(uint* arr, int n, int n2)
		{
			ImBitArraySetBitRangeNative(arr, n, n2);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitArraySetBitRange(ref uint arr, int n, int n2)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitRangeNative((uint*)parr, n, n2);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBitVectorCreateNative(ImBitVector* self, int sz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[807])(self, sz);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[807])((nint)self, sz);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitVectorCreate(ImBitVectorPtr self, int sz)
		{
			ImBitVectorCreateNative(self, sz);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitVectorCreate(ref ImBitVector self, int sz)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorCreateNative((ImBitVector*)pself, sz);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBitVectorClearNative(ImBitVector* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, void>)vt[808])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[808])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitVectorClear(ImBitVectorPtr self)
		{
			ImBitVectorClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitVectorClear(ref ImBitVector self)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearNative((ImBitVector*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ImBitVectorTestBitNative(ImBitVector* self, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImBitVector*, int, byte>)vt[809])(self, n);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)vt[809])((nint)self, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImBitVectorTestBit(ImBitVectorPtr self, int n)
		{
			byte ret = ImBitVectorTestBitNative(self, n);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImBitVectorTestBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				byte ret = ImBitVectorTestBitNative((ImBitVector*)pself, n);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBitVectorSetBitNative(ImBitVector* self, int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[810])(self, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[810])((nint)self, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitVectorSetBit(ImBitVectorPtr self, int n)
		{
			ImBitVectorSetBitNative(self, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitVectorSetBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorSetBitNative((ImBitVector*)pself, n);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImBitVectorClearBitNative(ImBitVector* self, int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[811])(self, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[811])((nint)self, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitVectorClearBit(ImBitVectorPtr self, int n)
		{
			ImBitVectorClearBitNative(self, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImBitVectorClearBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearBitNative((ImBitVector*)pself, n);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImGuiTextIndexClearNative(ImGuiTextIndex* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, void>)vt[812])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[812])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexClear(ImGuiTextIndexPtr self)
		{
			ImGuiTextIndexClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexClear(ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexClearNative((ImGuiTextIndex*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int ImGuiTextIndexSizeNative(ImGuiTextIndex* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, int>)vt[813])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[813])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImGuiTextIndexSize(ImGuiTextIndexPtr self)
		{
			int ret = ImGuiTextIndexSizeNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImGuiTextIndexSize(ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				int ret = ImGuiTextIndexSizeNative((ImGuiTextIndex*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte* ImGuiTextIndexGetLineBeginNative(ImGuiTextIndex* self, byte* baseValue, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, byte*>)vt[814])(self, baseValue, n);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, int, nint>)vt[814])((nint)self, (nint)baseValue, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, baseValue, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, baseValue, n));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte* ImGuiTextIndexGetLineEndNative(ImGuiTextIndex* self, byte* baseValue, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, byte*>)vt[815])(self, baseValue, n);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, int, nint>)vt[815])((nint)self, (nint)baseValue, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			byte* ret = ImGuiTextIndexGetLineEndNative(self, baseValue, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, baseValue, n));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineEndNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ImGuiTextIndexAppendNative(ImGuiTextIndex* self, byte* baseValue, int oldSize, int newSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, int, void>)vt[816])(self, baseValue, oldSize, newSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, void>)vt[816])((nint)self, (nint)baseValue, oldSize, newSize);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, byte* baseValue, int oldSize, int newSize)
		{
			ImGuiTextIndexAppendNative(self, baseValue, oldSize, newSize);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, byte* baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, baseValue, oldSize, newSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, ref byte baseValue, int oldSize, int newSize)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				ImGuiTextIndexAppendNative(self, (byte*)pbaseValue, oldSize, newSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int oldSize, int newSize)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				ImGuiTextIndexAppendNative(self, (byte*)pbaseValue, oldSize, newSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, string baseValue, int oldSize, int newSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextIndexAppendNative(self, pStr0, oldSize, newSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, ref byte baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, string baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, pStr0, oldSize, newSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static ImGuiStoragePair* ImLowerBoundNative(ImGuiStoragePair* inBegin, ImGuiStoragePair* inEnd, uint key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStoragePair*, ImGuiStoragePair*, uint, ImGuiStoragePair*>)vt[817])(inBegin, inEnd, key);
			#else
			return (ImGuiStoragePair*)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint>)vt[817])((nint)inBegin, (nint)inEnd, key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImGuiStoragePairPtr ImLowerBound(ImGuiStoragePairPtr inBegin, ImGuiStoragePairPtr inEnd, uint key)
		{
			ImGuiStoragePairPtr ret = ImLowerBoundNative(inBegin, inEnd, key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImGuiStoragePairPtr ImLowerBound(ref ImGuiStoragePair inBegin, ImGuiStoragePairPtr inEnd, uint key)
		{
			fixed (ImGuiStoragePair* pinBegin = &inBegin)
			{
				ImGuiStoragePairPtr ret = ImLowerBoundNative((ImGuiStoragePair*)pinBegin, inEnd, key);
				return ret;
			}
		}
	}
}
