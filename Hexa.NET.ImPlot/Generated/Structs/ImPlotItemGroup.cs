// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotItemGroup
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPlotLegend Legend;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImPlotItem ItemPool;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ColormapIdx;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotItemGroup(uint id = default, ImPlotLegend legend = default, ImPoolImPlotItem itemPool = default, int colormapIdx = default)
		{
			ID = id;
			Legend = legend;
			ItemPool = itemPool;
			ColormapIdx = colormapIdx;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotItemGroupPtr : IEquatable<ImPlotItemGroupPtr>
	{
		public ImPlotItemGroupPtr(ImPlotItemGroup* handle) { Handle = handle; }

		public ImPlotItemGroup* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotItemGroupPtr Null => new ImPlotItemGroupPtr(null);

		public ImPlotItemGroup this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotItemGroupPtr(ImPlotItemGroup* handle) => new ImPlotItemGroupPtr(handle);

		public static implicit operator ImPlotItemGroup*(ImPlotItemGroupPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotItemGroupPtr left, ImPlotItemGroupPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotItemGroupPtr left, ImPlotItemGroupPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotItemGroupPtr left, ImPlotItemGroup* right) => left.Handle == right;

		public static bool operator !=(ImPlotItemGroupPtr left, ImPlotItemGroup* right) => left.Handle != right;

		public bool Equals(ImPlotItemGroupPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotItemGroupPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotItemGroupPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPlotLegend Legend => ref Unsafe.AsRef<ImPlotLegend>(&Handle->Legend);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImPlotItem ItemPool => ref Unsafe.AsRef<ImPoolImPlotItem>(&Handle->ItemPool);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ColormapIdx => ref Unsafe.AsRef<int>(&Handle->ColormapIdx);
	}

}
