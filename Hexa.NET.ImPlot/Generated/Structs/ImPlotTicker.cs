// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotTicker
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImPlotTick> Ticks;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer TextBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MaxSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 LateSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Levels;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotTicker(ImVector<ImPlotTick> ticks = default, ImGuiTextBuffer textBuffer = default, Vector2 maxSize = default, Vector2 lateSize = default, int levels = default)
		{
			Ticks = ticks;
			TextBuffer = textBuffer;
			MaxSize = maxSize;
			LateSize = lateSize;
			Levels = levels;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotTickerPtr : IEquatable<ImPlotTickerPtr>
	{
		public ImPlotTickerPtr(ImPlotTicker* handle) { Handle = handle; }

		public ImPlotTicker* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotTickerPtr Null => new ImPlotTickerPtr(null);

		public ImPlotTicker this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotTickerPtr(ImPlotTicker* handle) => new ImPlotTickerPtr(handle);

		public static implicit operator ImPlotTicker*(ImPlotTickerPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotTickerPtr left, ImPlotTickerPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotTickerPtr left, ImPlotTickerPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotTickerPtr left, ImPlotTicker* right) => left.Handle == right;

		public static bool operator !=(ImPlotTickerPtr left, ImPlotTicker* right) => left.Handle != right;

		public bool Equals(ImPlotTickerPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotTickerPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotTickerPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImPlotTick> Ticks => ref Unsafe.AsRef<ImVector<ImPlotTick>>(&Handle->Ticks);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer TextBuffer => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->TextBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 MaxSize => ref Unsafe.AsRef<Vector2>(&Handle->MaxSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 LateSize => ref Unsafe.AsRef<Vector2>(&Handle->LateSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int Levels => ref Unsafe.AsRef<int>(&Handle->Levels);
	}

}
